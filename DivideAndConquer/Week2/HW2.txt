1. This question will give you further practice with the Master Method.  
Suppose the running time of an algorithm is governed by the recurrence 
T(n) = 7*T(n/3) + n^2

What's the overall asymptotic running time (i.e., the value of T(n))?

a = 7
b = 3
d = 2

b^d = 3^2 = 9

a < b^d

T(n) = n^d = n^2


2. This question will give you further practice with the Master Method. 
Suppose the running time of an algorithm is governed by the recurrence 
T(n) = 9 * T(n/3) + n^2

What's the overall asymptotic running time (i.e., the value of T(n))?

a = 9
b = 3
d = 2

b^d = 9 = a 

T(n) = n^d log n = n^2 log n

3. This question will give you further practice with the Master Method. 
Suppose the running time of an algorithm is governed by the recurrence 

T(n) = 5 * T (n/3) + 4n.

a = 5
b = 3
d = 1

b^d = 3 < a

T(n) = n^log_3 5

Question 4
Consider the following pseudocode for calculating a^b
  (where a and b are positive integers)
  
FastPower(a,b) :
  if b = 1
    return a
  else
    c := a*a
    ans := FastPower(c,[b/2])
  if b is odd
    return a*ans
  else return ans
end

Here [x] denotes the floor function, that is, the largest integer less than or equal to x. 

Now assuming that you use a calculator that supports multiplication and division (i.e., you can do multiplications and divisions in constant time), what would be the overall asymptotic running time of the above algorithm (as a function of b)?

a = 1
b = 2
d = 1

b^d = 2 < a

T(n) = log(n) = log(b)

Question 5
Choose the smallest correct upper bound on the solution to the following recurrence: 
T(1) = 1
T(n) <= T(sqrt{n}) + 1 for n > 1. 

Here [x] denotes the "floor" function, which rounds down to the nearest integer.  
(Note that the Master Method does not apply.)

O(log log n) 


  